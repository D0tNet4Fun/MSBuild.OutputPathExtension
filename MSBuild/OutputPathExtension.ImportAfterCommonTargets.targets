<!--
***********************************************************************************************
OutputPathExtension.ImportAfterCommonTargets.props

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

***********************************************************************************************
-->

<!--EXTERNAL_PROPERTIES: UseLinksInOutputPath;_RootOutputPathExists-->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- enable CreateHardLinks* CreateSymbolicLinks* built-in properties -->
  <!--use hard links when copying from obj to bin and use symbolic links otherwise -->
  <PropertyGroup Condition="'$(UseLinksInOutputPath)' == 'true' AND $(_RootOutputPathExists)">
    <CreateSymbolicLinksForCopyAdditionalFilesIfPossible>true</CreateSymbolicLinksForCopyAdditionalFilesIfPossible>
    <CreateSymbolicLinksForCopyLocalIfPossible>true</CreateSymbolicLinksForCopyLocalIfPossible>
    <CreateHardLinksForCopyFilesToOutputDirectoryIfPossible>true</CreateHardLinksForCopyFilesToOutputDirectoryIfPossible>
  </PropertyGroup>

  <!-- override MSBuild targets -->
  <PropertyGroup Condition="'$(UseLinksInOutputPath)' == 'true' AND $(_RootOutputPathExists)">
    <BuildDependsOn>
      _LinkOutputDirectories;
      $(BuildDependsOn)
    </BuildDependsOn>
    <PrepareForRunDependsOn>
      _IgnoreBuildingInsideVisualStudio;
      $(PrepareForRunDependsOn);
      _RestoreBuildingInsideVisualStudio
    </PrepareForRunDependsOn>
  </PropertyGroup>

  <!--define the output directories that should be converted to symbolic links targeting directories relative to $(ProjectRootOutputPath) -->
  <ItemGroup>
    <LinkOutputDirectory Include="$(IntermediateOutputPath)">
      <Type>intermediate</Type>
    </LinkOutputDirectory>
    <LinkOutputDirectory Include="$(OutDir)">
      <Type>final</Type>
    </LinkOutputDirectory>
  </ItemGroup>
  <!--
  ============================================================
                                      _LinkOutputDirectories

  Creates symbolic links for LinkOutputDirectories to target corresponding directories relative to $(ProjectRootOutputPath).
  This happens either before restoring NuGet packages (if the project uses PackageReferences) or before the build runs.
  ============================================================
  -->
  <Target Name="_LinkOutputDirectories"
          Condition="$(UseLinksInOutputPath) == 'true' AND $(_RootOutputPathExists) == 'true'"
          DependsOnTargets="_LinkOutputDirectory" />

  <Target Name="_LinkOutputDirectory" Inputs="@(LinkOutputDirectory)" Outputs="%(LinkOutputDirectory.Identity)">
    <!-- get the full path of this LinkOutputDirectory. i.e:
           Project directory = C:\Project
           LinkOutputDirectory = obj\Debug
           Result = C:\Project\obj\Debug -->
    <PropertyGroup>
      <LinkOutputDirectory>@(LinkOutputDirectory)</LinkOutputDirectory>
      <LinkOutputDirectory>$([System.IO.Path]::GetFullPath('$(LinkOutputDirectory)'))</LinkOutputDirectory>
      <LinkOutputDirectory Condition="!HasTrailingSlash('$(LinkOutputDirectory)')">$(LinkOutputDirectory)\</LinkOutputDirectory>
      <LinkOutputDirectoryParent>$([System.IO.Path]::GetDirectoryName('$(LinkOutputDirectory.TrimEnd('\'))'))</LinkOutputDirectoryParent>
    </PropertyGroup>
    <!--LinkOutputDirectory needs to be converted to a symlink eventually, but first we have to inspect it as it can be one of these:
          1. a child directory of ProjectDirectory, i.e. C:\Project\obj\Debug
             in this case we leave it as it is
          2. same as ProjectDirectory
             in this case there's nothing we can do regarding the conversion (we can't convert ProjectDirectory to a symlink!)
          3. not a child directory of ProjectDirectory, i.e. C:\Foreign\Output\Frameowrk\obj\Debug
             in this case we have to assume the user defined it and leave it alone -->
    <PropertyGroup>
      <_LinkOutputDirectoryRelativeToProjectDirectory>$([MSBuild]::MakeRelative('$(MSBuildProjectDirectory)', '$(LinkOutputDirectory)'))</_LinkOutputDirectoryRelativeToProjectDirectory>
      <_IsSameAsProjectDirectory Condition="$(_LinkOutputDirectoryRelativeToProjectDirectory) == ''">true</_IsSameAsProjectDirectory>
      <_IsNotChildOfProjectDirectory Condition="$(_LinkOutputDirectoryRelativeToProjectDirectory.StartsWith('..\'))">true</_IsNotChildOfProjectDirectory>
      <_IsChildOfProjectDirectory Condition="$(_IsSameAsProjectDirectory) != 'true' AND $(_IsNotChildOfProjectDirectory) != 'true'">true</_IsChildOfProjectDirectory>
    </PropertyGroup>
    <Message Importance="normal" Condition="$(_IsChildOfProjectDirectory) == 'true'" Text="[OutputPathExtension] The %(LinkOutputDirectory.Type) output directory '$(LinkOutputDirectory)' is beneath the project directory. This directory can be linked."/>
    <Warning Condition="$(_IsSameAsProjectDirectory) == 'true'" Text="[OutputPathExtension] The %(LinkOutputDirectory.Type) output directory '$(LinkOutputDirectory)' matches the project directory. This directory is not allowed to be linked." />
    <Warning Condition="$(_IsNotChildOfProjectDirectory) == 'true'" Text="[OutputPathExtension] The %(LinkOutputDirectory.Type) output directory '$(LinkOutputDirectory)' is not beneath the project directory. This directory will not be linked." />

    <PropertyGroup>
      <!-- get the target of LinkOutputDirectory relative to $(RootOutputPath). i.e.:
           LinkOutputDirectory = C:\Project\obj\Debug
           RootOutputPath = R:\Build
           Reuslt = R:\Build\C\Project\obj\Debug -->
      <LinkOutputDirectoryTarget>$(RootOutputPath)$(LinkOutputDirectory.Replace(':\', '\'))</LinkOutputDirectoryTarget>
      <!--add the trailing slash if needed -->
      <LinkOutputDirectoryTarget Condition="!HasTrailingSlash('$(LinkOutputDirectoryTarget)')">$(LinkOutputDirectoryTarget)\</LinkOutputDirectoryTarget>
    </PropertyGroup>

    <!--create the symlink unless it exists (only when LinkOutputPath is a child of ProjectDirectory) -->
    <!-- 1. delete LinkOutputDirectory if it is not a symlink -->
    <Message Condition="$(_IsChildOfProjectDirectory) == 'true' AND Exists('$(LinkOutputDirectory)') AND $([MSBuild]::BitwiseAnd(1024, $([System.IO.File]::GetAttributes('$(LinkOutputDirectory)')))) == 0"
              Importance="normal" Text='Converting %(LinkOutputDirectory.Type) output directory "$(LinkOutputDirectory)" to a symbolic link targeting "$(LinkOutputDirectoryTarget)"' />
    <RemoveDir Condition="$(_IsChildOfProjectDirectory) == 'true' AND Exists('$(LinkOutputDirectory)') AND $([MSBuild]::BitwiseAnd(1024, $([System.IO.File]::GetAttributes('$(LinkOutputDirectory)')))) == 0"
                Directories="$(LinkOutputDirectory)" />
    <!-- 2. create directories on disk -->
    <MakeDir Condition="!Exists('$(LinkOutputDirectoryParent)')" Directories="$(LinkOutputDirectoryParent)" />
    <MakeDir Condition="$(_IsChildOfProjectDirectory) == 'true' AND !Exists('$(LinkOutputDirectoryTarget)')" Directories="$(LinkOutputDirectoryTarget)" />
    <!-- 3. create the symlink -->
    <Exec Command='mklink /D "$(LinkOutputDirectory)" "$(LinkOutputDirectoryTarget)" >NUL'
          Condition="$(_IsChildOfProjectDirectory) == 'true' AND !Exists('$(LinkOutputDirectory)')"
          ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="MklinkExitCode" />
    </Exec>
    <!--4. log outcome -->
    <Warning Text="Could not create a symbolic link for %(LinkOutputDirectory.Type) output directory $(LinkOutputDirectory). Make sure the process runs elevated."
             Condition="$(MklinkExitCode) != '' AND '$(MSBuildLastTaskResult)' == 'false'" />
    <Message Importance="high" Text='Symbolic link created from "$(LinkOutputDirectory)" to "$(LinkOutputDirectoryTarget)"'
             Condition="$(MklinkExitCode) != '' AND '$(MSBuildLastTaskResult)' == 'true'" />
  </Target>

  <!--
  ============================================================
                                      _IgnoreBuildingInsideVisualStudio

  Disable BuildingInsideVisualStudio to allow using hard/symbolic links when copying files to output folder. This overrides MSBuild's behavior which disallows this for some reason.
  ============================================================
  -->
  <Target Name="_IgnoreBuildingInsideVisualStudio"
          Condition="'$(BuildingInsideVisualStudio)' == 'true'">
    <PropertyGroup>
      <_BuildingInsideVisualStudio>$(BuildingInsideVisualStudio)</_BuildingInsideVisualStudio>
      <BuildingInsideVisualStudio>false</BuildingInsideVisualStudio>
    </PropertyGroup>
  </Target>

  <!--
  ============================================================
                                      _RestoreBuildingInsideVisualStudio

  Restore the previous value of BuildingInsideVisualStudio.
  ============================================================
  -->
  <Target Name="_RestoreBuildingInsideVisualStudio"
          Condition="'$(_BuildingInsideVisualStudio)' == 'true'">
    <PropertyGroup>
      <BuildingInsideVisualStudio>$(_BuildingInsideVisualStudio)</BuildingInsideVisualStudio>
      <_BuildingInsideVisualStudio></_BuildingInsideVisualStudio>
    </PropertyGroup>
  </Target>

</Project>